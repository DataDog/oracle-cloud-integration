#!/bin/bash

# Define an array of OCI regions
regions=("af-johannesburg-1" "ap-chuncheon-1" "ap-hyderabad-1" "ap-melbourne-1" "ap-mumbai-1" "ap-osaka-1" "ap-seoul-1" "ap-singapore-1" "ap-singapore-2" "ap-sydney-1" 
"ap-tokyo-1" "ca-montreal-1" "ca-toronto-1" "eu-amsterdam-1" "eu-frankfurt-1" "eu-madrid-1" "eu-marseille-1" "eu-milan-1" "eu-paris-1" "eu-stockholm-1" "eu-zurich-1" 
"il-jerusalem-1" "me-abudhabi-1" "me-dubai-1" "me-jeddah-1" "me-riyadh-1" "mx-monterrey-1" "mx-queretaro-1" "sa-bogota-1" "sa-santiago-1" "sa-saopaulo-1" 
"sa-valparaiso-1" "sa-vinhedo-1" "uk-cardiff-1" "uk-london-1" "us-ashburn-1" "us-chicago-1" "us-phoenix-1" "us-sanjose-1")

# Generate a single Terraform configuration file
registry_file="regional-resources.tf"
provider_file="providers.tf"

providers=""
registries=""
header=$(cat <<EOL
# Autogenerated tf file through the generator script. DO NOT EDIT
# Run generator.sh to regenerate after adding regions
\n
EOL
)
footer=$(cat <<EOL
# End of autogenerated code
EOL
)

providers+=$header
registries+=$header

# Loop through each region and append to the Terraform configuration files
for region in "${regions[@]}"; do
    region_name=`echo ${region//-/_}`

networking_module=networking_${region}
# Append to OCI registries
    registries+=$(cat <<EOL
module "${networking_module}" {
  source = "./modules/networking"
  count  = local.is_current_region_home_region && contains(local.subscribed_regions_set, "${region}") ? 1 : 0
  providers = {
    oci = oci.${region}
  }
  compartment_id = module.compartment.id
  tags           = local.tags
}

module "functions_${region}" {
  source = "./modules/functions"
  count  = local.is_current_region_home_region && contains(local.subscribed_regions_set, "${region}") ? 1 : 0
  providers = {
    oci = oci.${region}
  }
  tenancy_id        = var.tenancy_ocid
  compartment_id    = module.compartment.id
  subnet_id         = module.${networking_module}[0].subnet_id
  tags              = local.tags
  datadog_site      = var.datadog_site
  home_region       = local.home_region_name
  api_key_secret_id = length(module.kms) > 0 ? module.kms[0].api_key_secret_id : ""
  region_key        = local.subscribed_regions_map["${region}"].region_key
}
\n
EOL
)

# Append to OCI terraform providers
    providers+=$(cat <<EOL
provider "oci" {
  tenancy_ocid = var.tenancy_ocid
  region       = "${region}"
  alias        = "${region}"
}
\n
EOL
)

done

providers+=$footer
registries+=$footer

# Write the final Terraform configuration to the output file
script_path=$(dirname "$(realpath "$0")")
echo "$providers" > $script_path/$provider_file
echo "$registries" > $script_path/$registry_file

echo "Generated: $registry_file"
echo "Generated: $provider_file"
